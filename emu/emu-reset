#!/bin/bash

source /usr/local/lib/libemu
SCRIPT=$(basename $0)
SOURCE_DIR="$(pwd)"

help ()
{
    cat << EOF | less
NAME
        $SCRIPT - reset source to snapshot

SYNOPSIS
        $PROG reset [OPTION...] [<sink>:]<snapshot>

DESCRIPTION
        Restores the contents of a snapshot to the source directory and sink
        HEAD. This means that all snapshots made after the given <snapshot> will
        be discarded.

        If you have a sink with a set of sequential snapshot [A->B->C], running
        reset against snapshot A will restore the source to snapshot A and
        discard snapshots B and C, effectively re-winding time.

OPTIONS
        -V
                   verify snapshot prior to restore
        -n
                   perform a trial run with no changes made
        -v
                   increase verbosity
        -p
                   show progress during transfer
        -f
                   force reset. This causes the program to disregard any
                   exclusivity locks that the source or sink directories may
                   have

EOF
}

main ()
{
    if [ "$1" = "help" ]
    then
        help
        exit 0
    fi

    emu restore $@
    pre_exec_hooks "$SOURCE_DIR"

    IN=$(echo "$1" | tr ":" "\n")

    if [[ $(echo "$IN" | wc -l) -ne 2 ]]
    then
        if [[ $(ls "$SOURCE_DIR/.$PROG/sinks" | wc -l) -eq 1 ]]
        then
            SINK="$(ls $SOURCE_DIR/.$PROG/sinks)"
        else
            echo "$SCRIPT: invalid snapshot"
            exit_with_error "$SOURCE_DIR"
        fi
    fi

    if [ "$SINK" = "" ]
    then
        SINK=$(echo "$IN" | head -n1)
    fi

    SINK_DIR="$(cat $SOURCE_DIR/.$PROG/sinks/$SINK 2>/dev/null)"
    if [[ ! -d "$SINK_DIR" ]]
    then
        echo "$SCRIPT: sink '$SINK' does not exist" >&2
        exit_with_error "$SOURCE_DIR"
    fi

    SNAPSHOT=$(echo "$IN" | tail -n1)
    if [ "$SNAPSHOT" = "HEAD" ]
    then
        SNAPSHOT="$(cat "$SINK_DIR/.$PROG/HEAD")"
    fi

    SNAPSHOT_DIR="$SINK_DIR/.$PROG/trees/$SNAPSHOT"
    if [[ ! -d "$SNAPSHOT_DIR" ]]
    then
        echo "$SCRIPT: snapshot '$SNAPSHOT' does not exist" >&2
        exit_with_error "$SOURCE_DIR"
    fi

    post_exec_hooks "$SOURCE_DIR"

}
main $@
