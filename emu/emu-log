#!/bin/bash

source /usr/local/lib/libemu
EMU_ECHO_PREFIX=$(basename "$0")

help ()
{
    man emu-log
}

print_node_verbose ()
{
cat <<EOF >>.emu_log
$NODE
  Date: $DATE
  Size: $SIZE

EOF
}

print_node_dense ()
{
cat <<EOF >>.emu_log
 $NODE * $DATE
EOF
}

# print the nodes for a sink
#
# @param $1 Name of sink.
print_nodes ()
{
    print_sink_details $1 >> .emu_log

    SINK_PATH="$(cat $SOURCE_DIR/.emu/sinks/$1)"
    for NODE in $(ls "$SINK_PATH/.emu/nodes" | sort -r)
    do
        NODE_PATH="$SINK_PATH/.emu/nodes/$NODE"
        DATE="$(cat $NODE_PATH | grep Date | sed -r 's/Date +(.*)/\1/')"
        SIZE="$(cat $NODE_PATH | grep Size | sed -r 's/Size +(.*)/\1/')"

        print_node_verbose $NODE
    done
    cat .emu_log | less
    rm -f .emu_log
}

main ()
{
    if [[ "$1" == "help" ]]
    then
        help
        exit 0
    fi

    get_source_dir_or_fail
    pre_exec_hooks

    if ! (( $(ls "$SOURCE_DIR/.emu/sinks" | wc -l) ))
    then
        emu_error "no sinks. See 'emu help sink'"
        emu_panic
        exit $EMU_EXIT_ERROR
    fi

    for sink in $@
    do
        local sink_dir="$(cat $SOURCE_DIR/.emu/sinks/$sink 2>/dev/null)"

        if [[ ! -f "$SOURCE_DIR/.emu/sinks/$sink" ]]
        then
            emu_error "sink '$sink' does not exist"
            emu_panic
            exit $EMU_EXIT_ERROR
        fi

        if [ -z "$sink_dir" ] || [[ ! -d "$sink_dir" ]]
        then
            emu_error "sink '$sink' is corrrupt"
            emu_panic
            exit $EMU_EXIT_ERROR
        fi

        print_nodes "$sink"
    done

    post_exec_hooks
    exit 0
}
main $@
