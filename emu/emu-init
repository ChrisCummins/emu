#!/bin/sh

source /usr/local/lib/libemu
SCRIPT=$(basename $0)

SOURCE_DIR="$(pwd)"
CONF_DIR="$SOURCE_DIR/.$PROG"

help ()
{
    cat <<EOF | less
NAME
        $SCRIPT - create or reinitialize an existing $PROG source

SYNOPSIS
        $PROG init [OPTION...] [directory]

DESCRIPTION
        This command creates an empty $PROG source. This means creating a .$PROG
        directory with subdirectories for hooks, sink refs and configuration
        files.

        During the init process, template files are copied from the global
        templates path, normally /usr/local/share/emu. Use of option -t to
        specify a template directory will supercede this.

        This command is non-destructive, running it on an existing emu source
        will not overwrite any existing data. Instead, it can be used to rescue
        a broken source, as it will silently replace or recreate any missing
        files. If you have broken a file and would like to revert to the
        default, delete it and run this command.

OPTIONS
        -t <template-dir>
                   specify the directory from which templates will be used
        -q
                   only print error and warning messages, all other output will
                   be suppressed
        -R
                   if a file exists in both the template and source directories,
                   replace the source file with the template
        -C
                   clean directory. This undoes the effect of an init, clearing
                   the .$PROG directory. It does not affect sinks, though it
                   will remove refs to them

EOF
}

check_permissions ()
{
    touch "$SOURCE_DIR/.emu-permissions-test" &>/dev/null
    if (( $? ))
    then
        echo "$SCRIPT: insufficient user permissions!" >&2
        exit 1
    fi
}

clean_emu_dir ()
{
    if [ ! -d "$SOURCE_DIR/.$PROG/sinks" ]
    then
        echo "$SCRIPT: not an $PROG source!" >&2
        exit 5
    fi

    rm $EMU_VERBOSE -rf "$SOURCE_DIR/.$PROG"

    if ! (( $EMU_QUIET ))
    then
        echo "$SCRIPT: emptied source in $SOURCE_DIR/.$PROG"
    fi
}

create_directories ()
{
    mkdir $EMU_VERBOSE -p "$CONF_DIR"
    mkdir $EMU_VERBOSE -p "$CONF_DIR/config"
    mkdir $EMU_VERBOSE -p "$CONF_DIR/hooks"
    mkdir $EMU_VERBOSE -p "$CONF_DIR/sinks"
    chmod 0755 "$CONF_DIR/sinks"
}

copy_template_files ()
{
    # Copy over files from shared templates dir.
    rsync $EMU_VERBOSE -ah $TEMPLATE_UPDATE "$EMU_TEMPLATE_DIR/" "$SOURCE_DIR/.$PROG/"
}

init_filesystem ()
{
    create_directories
    copy_template_files
}

emu_init ()
{
    if [[ -d .emu ]]
    then
        init_filesystem
        if ! (( $EMU_QUIET ))
        then
            echo "$SCRIPT: Reinitialized existing source in $CONF_DIR"
        fi
    else
        init_filesystem
        if ! (( $EMU_QUIET ))
        then
            echo "$SCRIPT: Initialized source in $CONF_DIR"
        fi
    fi
}


main ()
{
    TEMPLATE_UPDATE="-u"

    while getopts ":qvCRt:" OPT
    do
        case $OPT in
            q)
                EMU_QUIET=1
                ;;
            C)
                EMU_DIR_CLEAN=1
                ;;
            v)
                EMU_VERBOSE="-v"
                ;;
            R)
                TEMPLATE_UPDATE=""
                ;;
            t)
                EMU_TEMPLATE_DIR="$OPTARG"
                if [ ! -d "$EMU_TEMPLATE_DIR" ]
                then
                    echo "$SCRIPT: '$OPTARG' not a directory" >&2
                    exit 1
                fi
                ;;
            \?)
                echo "$SCRIPT: invalid option: -$OPTARG" >&2
                exit 1
                ;;
            :)
                echo "$SCRIPT: option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done

    if [ "$1" = "help" ]
    then
        help
        exit 0
    fi

    if [ "$EMU_TEMPLATE_DIR" == "" ]
    then
        EMU_TEMPLATE_DIR="/usr/share/$PROG/source-templates"
    fi

    check_permissions

    if (( $EMU_DIR_CLEAN ))
    then
        clean_emu_dir
        exit 0
    fi

    emu_init
    exit 0
}
main $@
