#!/bin/sh

source /usr/local/lib/libemu
SCRIPT=$(basename $0)
VERSION="0.0.1"

# Print the help text.
help ()
{
    cat <<EOF | less
$PROG version $VERSION - Copyright (C) 2012 by Chris Cummins

LICENSE
        Permission is hereby granted, free of charge, to any person obtaining a
        copy of this software and associated documentation files (the
        "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:

        The above copyright notice and this permission notice shall be included
        in all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

SYNOPSIS
        $SCRIPT [version] [help] <command> [OPTION...]

COMMANDS
        Below is a brief summary of the available commands. For more information
        on any, see '$PROG help <command>':

          clean         remove locks and orphaned data
          init          initialize a source
          log           show sink logs
          sink          manage sinks
          reset         restore and discard snapshots
          restore       restore source from snaphot
          sanitycheck   check program compatability
          snapshot      create snapshots
          status        source status
          verify        validate snapshots

EOF
}

help_command ()
{
    if [[ $1 != "" ]]
    then
        EXEC=$SCRIPT-$1
        command -v $EXEC >/dev/null 2>&1 || { no_command_error "$SCRIPT" "$1"; }
        $EXEC help
        exit 0
    else
        help
        exit 0
    fi
}

# Print the version number.
version ()
{
    echo "$SCRIPT version $VERSION"
}

print_emu ()
{
    cat << EOF | less
                                       /-/-=/-=
                                      //  ZX   \"
                                    / /XZXZX(o)  ---,
                                    / XZXZXZXZX _____\`\\
                                     /ZXZXZXZX
                                      / ;,ZXZ
                                      /  :ZX%\\
                                      /%  : X\\
                                      :/:  %:X:
                                      /%:%   %\\\\
                                       /:%:  %  \\
                                       /  :%  : \\
                                        /  :%  :%\\
                                        /%  %    \\
                                        /%:  %:  %\\
                                        //%    :  %\\
                   %%%%%%%%%%  %% %%   /  /     :   :
              %%%%%%%%       %%  %   %%%%           \\:
            %%%%%%                                 : \\
          %%%%                                    :%:\\
       % %                                       %  \\
      %                                         %% \\
    %                                  %%% %%%%%% \\
  %                                 %%%%%%%% %%%\\
 %                                %%  %%%%%% %\\
 %                         %%%%%%%%%%%%% %%%%\\\\
 %%%%/%%%%%%%%%%%%%%%%%%%%%%% %%%%%%% %%% %%\\
 /       %%%%%%%%%  % %% % %%% % %%%%% %%%\\
                (_____)%%(_____)%%%%%%\\
              ((_____) ((____)
                (___)    (___)
                 (__)     (__)
                  (__)     (__)
                   (__)     (__)
                    (__)     (__)
                     (  )     (  )
                     (  )     (  )
                    (    )   (    )
                  (__    |  (___  |
              ___(  /  \\  \\____ \\  |---
            <(____/      \\_____(>\\_____(>
EOF
}

# Get arguments.
while getopts :hv OPT
do
    case $OPT in
        h)
            help
            exit 0
            ;;
        v)
            version
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit $EXIT_INVALID_ARGS
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit $EXIT_INVALID_ARGS
            ;;
    esac
done

# Get command.
COMMAND="$1"
shift

# Parse commands.
case $COMMAND in
    "" | "help")
        help_command $@
        exit 0
        ;;
    "version")
        version
        exit 0
        ;;
    "emu")
        print_emu
        exit 0
        ;;
    *)
        # Execute command.
        EXEC=$SCRIPT-$COMMAND
        command -v $EXEC >/dev/null 2>&1 || { no_command_error "$SCRIPT" "$COMMAND"; }
        $EXEC $@
        exit $?
        ;;
esac
