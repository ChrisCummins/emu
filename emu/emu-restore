#!/bin/bash

source /usr/local/lib/libemu
EMU_ECHO_PREFIX=$(basename "$0")

main ()
{
    test -n "$EMU_DEBUG" && set -x
    exit_on_help_version $@

    get_source_dir_or_fail

    pre_exec_hooks "$SOURCE_DIR"
    lock_dir "$SOURCE_DIR"

    IN=$(echo "$1" | tr ":" "\n")

    if [[ $(echo "$IN" | wc -l) -ne 2 ]]
    then
        if [[ $(ls "$SOURCE_DIR/.emu/sinks" | wc -l) -eq 1 ]]
        then
            SINK="$(ls $SOURCE_DIR/.emu/sinks)"
        else
            emu_error "invalid snapshot"
            emu_panic
            exit $EMU_EXIT_ERROR
        fi
    fi

    if [ "$SINK" = "" ]
    then
        SINK=$(echo "$IN" | head -n1)
    fi

    SINK_DIR="$(cat $SOURCE_DIR/.emu/sinks/$SINK 2>/dev/null)"
    if [[ ! -d "$SINK_DIR" ]]
    then
        emu_error "sink '$SINK' does not exist"
        emu_panic
        exit $EMU_EXIT_ERROR
    fi

    lock_dir "$SINK_DIR"

    SNAPSHOT=$(echo "$IN" | tail -n1)
    if [ "$SNAPSHOT" = "HEAD" ]
    then
        SNAPSHOT="$(cat "$SINK_DIR/.emu/HEAD")"
    fi

    SNAPSHOT_DIR="$SINK_DIR/.emu/trees/$SNAPSHOT"
    if [[ ! -d "$SNAPSHOT_DIR" ]]
    then
        emu_error "snapshot '$SNAPSHOT' does not exist"
        emu_panic
        exit $EMU_EXIT_ERROR
    fi

    rsync \
        --delete \
        --archive \
        --human-readable \
        --exclude-from="$SOURCE_DIR/.emu/excludes" \
        "$SNAPSHOT_DIR/" "$SOURCE_DIR"
    if (( $? ))
    then
        emu_error "restore of '$SINK:$SNAPSHOT' failed"
    fi

    emu_echo "SOURCE at '$SINK:$SNAPSHOT'"

    unlock_dir "$SINK_DIR"
    unlock_dir "$SOURCE_DIR"
    post_exec_hooks "$SOURCE_DIR"
}
main $@
