#!/bin/sh

source /usr/share/emu/emu-util
SCRIPT=$(basename $0)

help ()
{
    echo "\
$SCRIPT - manage $PROG sinks.

With no arguments, show a list of existing sinks. Several subommands are
available to perform operations on sinks.

add <name> <path>
    Adds a sink name <name> for the directory at <path>.
rename <old> <new>
    Rename the sink named <old> to <new>.
rm <name>
    Remove the sink named <name>. Does not remove any $PROG files.
show <name>
    Gives some information about the sink <name>.
"
}

init_sink ()
{
    SINK_DIR="$1"
    TEMPLATE_DIR="/usr/share/emu/sink-templates"

    mkdir -p "$SINK_DIR/.$PROG"
    mkdir -p "$SINK_DIR/.$PROG/trees"
    mkdir -p "$SINK_DIR/.$PROG/nodes"
    mkdir -p "$SINK_DIR/.$PROG/config"
    touch "$SINK_DIR/.$PROG/HEAD"
    echo $(pwd) > "$SINK_DIR/.$PROG/SOURCE"
    cp -n "$TEMPLATE_DIR/config/SNAPSHOT-COUNT" "$SINK_DIR/.$PROG/config"

    echo "$SCRIPT: Initialized sink at $SINK_DIR/"
}

add_sink ()
{
    if [[ "$1" == "" ]] || [[ "$2" == "" ]]
    then
        help
        exit 1
    fi

    if [[ -f ".$PROG/sinks/$1" ]]
    then
        echo "$SCRIPT: Sink '$1' already exists." >&2
        exit 1
    fi

    if [[ -d "$2/.$PROG" ]]
    then
        echo "$SCRIPT: '$2/.$PROG' already exists." >&2
        exit 1
    fi

    # Create sinks/remote file.
    echo "$2" > ".$PROG/sinks/$1"

    # Initialize sink.
    init_sink "$2"
}

rm_sink ()
{
    if [[ ! -f ".$PROG/sinks/$1" ]]
    then
        echo "$SCRIPT: Sink '$1' does not exist." >&2
        exit 1
    fi

    rm -f ".$PROG/sinks/$1"
    echo "$SCRIPT: Sink '$1' removed."
}

show_sink ()
{
    if [[ $@ == "" ]]
    then
        SINKS=$(ls ".$PROG/sinks")
    else
        FAILURE=0
        for ARG in $@
        do
            if [[ -f ".$PROG/sinks/$ARG" ]]
            then
                SINKS="$SINKS\n$ARG"
            else
                echo "$SCRIPT: Sink '$ARG' does not exist." >&2
                FAILURE=1
            fi

            if [[ FAILURE -ne 0 ]]
            then
                exit_with_error
            fi

            SINKS="$(echo -e SINKS | tail -n+2)"
        done
    fi

    for SINK in $SINKS
    do
        SINK_PATH="$(cat .$PROG/sinks/$SINK)"
        SIZE="$(du -sh $SINK_PATH | sed -r 's/([0-9a-zA-Z]+)\s.*/\1/')"
        HEAD="$(cat $SINK_PATH/.$PROG/HEAD)"
        SNAPSHOT_COUNT="$(ls $SINK_PATH/.$PROG/trees | wc -l)"
        LOAD="$(echo $SNAPSHOT_COUNT / $(cat $SINK_PATH/.$PROG/config/SNAPSHOT-COUNT) * 100 | bc -l)"
        echo "\
* $SINK
  Path:           $SINK_PATH
  Size:           $SIZE
  Last snapshot:  $(cat $SINK_PATH/.$PROG/nodes/$HEAD | grep Date | sed -r 's/Date +(.*)/\1/')
  Snapshot count: $SNAPSHOT_COUNT (${LOAD::2}%)
"
    done
}

list_sinks ()
{
    ls ".$PROG/sinks"
}

main ()
{
    COMMAND="$1"
    shift

    case "$COMMAND" in
        "help")
            help
            ;;
        "")
            list_sinks
            ;;
        "add")
            add_sink $1 $2
            ;;
        "rm")
            rm_sink $@
            ;;
        "show")
            show_sink $@
            ;;
        *)
            no_command_error "$SCRIPT" "$COMMAND"
            ;;
    esac

    exit 0
}
main
